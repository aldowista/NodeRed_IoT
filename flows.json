[
    {
        "id": "0ea2520bdfb232c5",
        "type": "tab",
        "label": "IoT Lab Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1ef184365338606a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fda40ddd2560b63d",
        "type": "subflow",
        "name": "AES",
        "info": "This subflow implements the capabilities for encrypting and decrypting a user provided JSON object with a secret key using the *Advanced Encryption Standard*. The subflow supports the following AES cipher modes:\n- CBC\n- CFB\n- CTR\n- OFB\n\n## *Encryption Mode*\nThis subflow allows for the encryption of plaintext message to encrypted ciphertexts using a user provided key.\n\n### Inputs\n>\n> **msg.*function***: \"encrypt\"\n>\n> **msg.*mode***: Block cipher mode. \n>\n> **payload.*text***: Plaintext to encrypt.\n>\n> **payload.*key***: Encryption key. \n>\n\n### Outputs\n>\n> **payload.*ciphertext***: The encrypted text.\n>\n\n## *Decryption Mode*\nThis subflow allows for the decryption of ciphertext message to a decrypted plaintext using a user provided key.\n\n### Inputs\n>\n> **msg.*function***: \"decrypt\"\n>\n> **msg.*mode***: Block cipher mode. \n>\n> **payload.*ciphertext***: Plaintext to decrypt.\n>\n> **payload.*key***: Decryption key. \n>\n\n### Outputs\n>\n> **payload.*plaintext***: The decrypted text.\n>",
        "category": "CryptoRed",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "e623e864e070b538"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 80,
                "wires": [
                    {
                        "id": "4a0794ecf0809e38",
                        "port": 0
                    },
                    {
                        "id": "047435f1358b1bd1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "function",
                "type": "str",
                "value": "encrypt",
                "ui": {
                    "icon": "font-awesome/fa-gears",
                    "label": {
                        "en-US": "Function"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Encrypt"
                                },
                                "v": "encrypt"
                            },
                            {
                                "l": {
                                    "en-US": "Decrypt"
                                },
                                "v": "decrypt"
                            }
                        ]
                    }
                }
            },
            {
                "name": "mode",
                "type": "str",
                "value": "CBC",
                "ui": {
                    "icon": "font-awesome/fa-gear",
                    "label": {
                        "en-US": "Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Cipher Block Chaining"
                                },
                                "v": "CBC"
                            },
                            {
                                "l": {
                                    "en-US": "Cipher FeedBack"
                                },
                                "v": "CFB"
                            },
                            {
                                "l": {
                                    "en-US": "Output FeedBack"
                                },
                                "v": "OFB"
                            },
                            {
                                "l": {
                                    "en-US": "Counter"
                                },
                                "v": "CTR"
                            }
                        ]
                    }
                }
            },
            {
                "name": "key",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "label": {
                        "en-US": "Key"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-crypto-tools-aes",
            "version": "0.0.1",
            "author": "Thodoris Ioannidis <thodoris.ioannidis@inqbit.io>",
            "desc": "AES encryption and decryption functionalities",
            "keywords": "aes, block, cipher",
            "license": "Apache-2.0"
        },
        "color": "#3FADB5",
        "inputLabels": [
            "plaintext"
        ],
        "outputLabels": [
            "ciphertext"
        ],
        "icon": "font-awesome/fa-cubes"
    },
    {
        "id": "b63c0686a5f9c2a1",
        "type": "subflow",
        "name": "Encrypt",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 160,
                "wires": [
                    {
                        "id": "649d7ceb44271465"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 160,
                "wires": [
                    {
                        "id": "3b3518c922197d6c",
                        "port": 0
                    },
                    {
                        "id": "1ca5903a9ebb5e3a",
                        "port": 0
                    },
                    {
                        "id": "41b47f15bedad10d",
                        "port": 0
                    },
                    {
                        "id": "a2f58202307bb5ae",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "95376bbbd3259984",
        "type": "subflow",
        "name": "AES (2)",
        "info": "This subflow implements the capabilities for encrypting and decrypting a user provided JSON object with a secret key using the *Advanced Encryption Standard*. The subflow supports the following AES cipher modes:\n- CBC\n- CFB\n- CTR\n- OFB\n\n## *Encryption Mode*\nThis subflow allows for the encryption of plaintext message to encrypted ciphertexts using a user provided key.\n\n### Inputs\n>\n> **msg.*function***: \"encrypt\"\n>\n> **msg.*mode***: Block cipher mode. \n>\n> **payload.*text***: Plaintext to encrypt.\n>\n> **payload.*key***: Encryption key. \n>\n\n### Outputs\n>\n> **payload.*ciphertext***: The encrypted text.\n>\n\n## *Decryption Mode*\nThis subflow allows for the decryption of ciphertext message to a decrypted plaintext using a user provided key.\n\n### Inputs\n>\n> **msg.*function***: \"decrypt\"\n>\n> **msg.*mode***: Block cipher mode. \n>\n> **payload.*ciphertext***: Plaintext to decrypt.\n>\n> **payload.*key***: Decryption key. \n>\n\n### Outputs\n>\n> **payload.*plaintext***: The decrypted text.\n>",
        "category": "CryptoRed",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "737cb022b9cbf267"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 680,
                "y": 80,
                "wires": [
                    {
                        "id": "bcf652f498b2654a",
                        "port": 0
                    },
                    {
                        "id": "2b178da01e5f24d2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "function",
                "type": "str",
                "value": "encrypt",
                "ui": {
                    "icon": "font-awesome/fa-gears",
                    "label": {
                        "en-US": "Function"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Encrypt"
                                },
                                "v": "encrypt"
                            },
                            {
                                "l": {
                                    "en-US": "Decrypt"
                                },
                                "v": "decrypt"
                            }
                        ]
                    }
                }
            },
            {
                "name": "mode",
                "type": "str",
                "value": "CBC",
                "ui": {
                    "icon": "font-awesome/fa-gear",
                    "label": {
                        "en-US": "Mode"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Cipher Block Chaining"
                                },
                                "v": "CBC"
                            },
                            {
                                "l": {
                                    "en-US": "Cipher FeedBack"
                                },
                                "v": "CFB"
                            },
                            {
                                "l": {
                                    "en-US": "Output FeedBack"
                                },
                                "v": "OFB"
                            },
                            {
                                "l": {
                                    "en-US": "Counter"
                                },
                                "v": "CTR"
                            }
                        ]
                    }
                }
            },
            {
                "name": "key",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "label": {
                        "en-US": "Key"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "node-red-contrib-crypto-tools-aes",
            "version": "0.0.1",
            "author": "Thodoris Ioannidis <thodoris.ioannidis@inqbit.io>",
            "desc": "AES encryption and decryption functionalities",
            "keywords": "aes, block, cipher",
            "license": "Apache-2.0"
        },
        "color": "#3FADB5",
        "inputLabels": [
            "plaintext"
        ],
        "outputLabels": [
            "ciphertext"
        ],
        "icon": "font-awesome/fa-cubes"
    },
    {
        "id": "3069d064eaeb4b91",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "isrgrootx1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "0ec95b9bdb8e7501",
        "type": "mqtt-broker",
        "name": "",
        "broker": "d9bbc92ca3ee4c19814e290829169611.s2.eu.hivemq.cloud",
        "port": "8883",
        "tls": "3069d064eaeb4b91",
        "clientid": "nodeRed",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6a6fdfa17ced3a2a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ab2fa976a6e78968",
        "type": "ui_tab",
        "name": "Sensor Node 1",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "707efa755cd362f4",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "ab2fa976a6e78968",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "179ce820b0772585",
        "type": "ui_group",
        "name": "Humidity",
        "tab": "ab2fa976a6e78968",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6307337d97088963",
        "type": "ui_group",
        "name": "User Action",
        "tab": "ab2fa976a6e78968",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "715f55cd1c2492b4",
        "type": "ui_tab",
        "name": "Sensor Node 2",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2bc9383be496ea4b",
        "type": "ui_group",
        "name": "Temperature",
        "tab": "715f55cd1c2492b4",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1a29357cf76cc86c",
        "type": "ui_group",
        "name": "Humidity",
        "tab": "715f55cd1c2492b4",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7989444b934d9ec1",
        "type": "ui_group",
        "name": "User Action",
        "tab": "715f55cd1c2492b4",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4a0794ecf0809e38",
        "type": "function",
        "z": "fda40ddd2560b63d",
        "name": "ENCRYPTION",
        "func": "\nfunction encryptCBC(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.CBC\n    }).toString();\n}\n\nfunction encryptCFB(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.CFB\n    }).toString();\n}\n\nfunction encryptCTR(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.CTR\n    }).toString();\n}\n\nfunction encryptOFB(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.OFB\n    }).toString();\n}\n\nmessage = msg.payload.plaintext;\nlet ciphertext, mode = msg.payload.mode || env.get('mode'),key = msg.payload.key || env.get('key');\n\nswitch(mode){\n    case 'CBC':\n        ciphertext = encryptCBC(message, key)\n        break;\n    case 'CFB':\n        ciphertext = encryptCFB(message, key)\n        break;\n    case 'CTR':\n        ciphertext = encryptCTR(message, key)\n        break;\n    case 'OFB':\n        ciphertext = encryptOFB(message, key)\n        break;\n}\ndelete msg.payload.plaintext\nmsg.payload.enc = {\n    mode: mode,\n    ciphertext: ciphertext\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 13,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoJs",
                "module": "crypto-js"
            }
        ],
        "x": 420,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "047435f1358b1bd1",
        "type": "function",
        "z": "fda40ddd2560b63d",
        "name": "DECRYPTION",
        "func": "function isJSON(text) {\n  try {\n    JSON.parse(text);\n    return true;\n  }catch (e){\n    return false;\n  }\n}\n\nfunction decryptCBC(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.CBC \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\nfunction decryptCFB(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.CFB \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\nfunction decryptCTR(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.CTR \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\nfunction decryptOFB(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.OFB \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\n\nmessage = msg.payload.ciphertext;\nlet plaintext, mode = msg.payload.mode || env.get('mode'), key =  msg.payload.key || env.get('key')\n\nswitch(mode){\n    case 'CBC':\n        plaintext = decryptCBC(message, key)\n        break;\n    case 'CFB':\n        plaintext = decryptCFB(message, key)\n        break;\n    case 'CTR':\n        plaintext = decryptCTR(message, key)\n        break;\n    case 'OFB':\n        plaintext = decryptOFB(message, key)\n        break;\n}\ndelete msg.payload.ciphertext\nmsg.payload.dec = {\n    mode: mode,\n    plaintext: isJSON(plaintext) ? JSON.parse(plaintext) : plaintext\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 22,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoJs",
                "module": "crypto-js"
            }
        ],
        "x": 420,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e623e864e070b538",
        "type": "switch",
        "z": "fda40ddd2560b63d",
        "name": "FUNCTION",
        "property": "function",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "encrypt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "decrypt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "4a0794ecf0809e38"
            ],
            [
                "047435f1358b1bd1"
            ]
        ]
    },
    {
        "id": "3b3518c922197d6c",
        "type": "function",
        "z": "b63c0686a5f9c2a1",
        "name": "Encryption shift",
        "func": "const alphabet = [\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n    \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n    \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n];\n\nfunction encrypt(character, shift_number) {\n    let character_exists =\n    alphabet.includes(character.toUpperCase())\n\n    if (character_exists) {\n        let position_of_character =\n        alphabet.indexOf(character.toUpperCase()) \n\n        let encryption_character_position = \n        (position_of_character + shift_number) %\n        alphabet.length\n        \n        return alphabet[encryption_character_position]\n    }else {\n        return character\n    }\n}\n\nlet encrypted_characters = []\nlet shift = msg.payload[1]\n\nfor (let item of msg.payload[0]) {\n    // console.log(item)\n    encrypted_characters.push(encrypt(item,shift))\n}\n\nlet encrypted_text = encrypted_characters.join(\"\");\nconsole.log(1)\nmsg.payload[0] = encrypted_text\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7920a9487196d790",
        "type": "switch",
        "z": "b63c0686a5f9c2a1",
        "name": "Enc_Dec_1",
        "property": "payload[2]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "encrypt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "decrypt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 100,
        "wires": [
            [
                "3b3518c922197d6c"
            ],
            [
                "1ca5903a9ebb5e3a"
            ]
        ]
    },
    {
        "id": "1ca5903a9ebb5e3a",
        "type": "function",
        "z": "b63c0686a5f9c2a1",
        "name": "Decryption shift",
        "func": "const alphabet = [\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n    \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n    \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n];\n\nfunction decrypt(character, shift_number) {\n    let character_exists =\n        alphabet.includes(character.toUpperCase())\n\n    if (character_exists) {\n        let position_of_character =\n            alphabet.indexOf(character.toUpperCase())\n\n        let decryption_character_position =\n            (position_of_character + shift_number) %\n            alphabet.length\n            // console.log(\"enc_pos\",encryption_character_position)\n\n        return alphabet[decryption_character_position]\n    } else {\n        return character\n    }\n}\n\nlet decrypted_characters = []\nlet shift = (alphabet.length - msg.payload[1]) %\n            alphabet.length\n// console.log(\"shift\",shift)\n\nfor (let item of msg.payload[0]) {\n    // console.log(item)\n    decrypted_characters.push(decrypt(item, shift))\n}\n\nlet decrypted_text = decrypted_characters.join(\"\");\nconsole.log(2)\nmsg.payload[0] = decrypted_text\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "649d7ceb44271465",
        "type": "switch",
        "z": "b63c0686a5f9c2a1",
        "name": "Enc_type",
        "property": "payload[3]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "7920a9487196d790"
            ],
            [
                "f3b22b896b1df6b3"
            ]
        ]
    },
    {
        "id": "f3b22b896b1df6b3",
        "type": "switch",
        "z": "b63c0686a5f9c2a1",
        "name": "Enc_Dec_2",
        "property": "payload[2]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "encrypt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "decrypt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "41b47f15bedad10d"
            ],
            [
                "a2f58202307bb5ae"
            ]
        ]
    },
    {
        "id": "41b47f15bedad10d",
        "type": "function",
        "z": "b63c0686a5f9c2a1",
        "name": "Encryption key",
        "func": "const alphabet = [\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n    \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n    \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n];\n\nfunction encrypt(text_character ,keyword_character) {\n    let character_exists =\n    alphabet.includes(text_character.toUpperCase())\n\n    if (character_exists) {\n        let position_of_text_character =\n        alphabet.indexOf(text_character.toUpperCase())\n        // console.log('char_pos' + \" \" + position_of_text_character)\n\n        let position_of_keyword_character =\n        alphabet.indexOf(keyword_character.toUpperCase())\n        // console.log('key_pos' + \" \" + position_of_keyword_character)\n\n        let encryption_character_position =\n        (position_of_text_character + position_of_keyword_character)\n        % alphabet.length\n        // console.log('enc_idx' + \" \" + encryption_character_position)\n\n        return alphabet[encryption_character_position]\n    }else {\n        return text_character\n    }\n}\n\nlet encrypted_characters = []\nlet keyword_index = 0\n\nfor (let item of msg.payload[0]) {\n    keyword_index = keyword_index === msg.payload[3].length - 1 ?\n    0 : keyword_index + 1; \n    encrypted_characters.push(encrypt(item, msg.payload[3][keyword_index]))\n}\n\nlet encrypted_text = encrypted_characters.join(\"\");\nconsole.log(3)\nmsg.payload[0] = encrypted_text\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a2f58202307bb5ae",
        "type": "function",
        "z": "b63c0686a5f9c2a1",
        "name": "Decryption key",
        "func": "const alphabet = [\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n    \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n    \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\n];\n\nfunction decrypt(text_character, keyword_character) {\n    let character_exists =\n    alphabet.includes(text_character.toUpperCase())\n\n    if (character_exists) {\n        let position_of_text_character =\n        alphabet.indexOf(text_character.toUpperCase())\n        // console.log('char_pos' + \" \" + position_of_text_character)\n\n        let position_of_keyword_character =\n        alphabet.indexOf(keyword_character.toUpperCase())\n        // console.log('key_pos' + \" \" + position_of_keyword_character)\n\n        let decryption_character_position =\n        (position_of_text_character - position_of_keyword_character + alphabet.length)\n        % alphabet.length\n        // console.log('dec_idx' + \" \" + decryption_character_position)\n\n        return alphabet[decryption_character_position]\n    } else {\n        return text_character\n    }\n}\n\nlet decrypted_characters = []\nlet keyword_index = 0\n\nfor (let item of msg.payload[0]) {\n    keyword_index = keyword_index === msg.payload[3].length - 1 ?\n    0 : keyword_index + 1;\n    decrypted_characters.push(decrypt(item, msg.payload[3][keyword_index]))\n}\n\nlet decrypted_text = decrypted_characters.join(\"\");\nconsole.log(4)\nmsg.payload[0] = decrypted_text\n// [\"HRLYO JBHA\", 2, \"decrypt\", \"banana\"]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "bcf652f498b2654a",
        "type": "function",
        "z": "95376bbbd3259984",
        "name": "ENCRYPTION",
        "func": "\nfunction encryptCBC(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.CBC\n    }).toString();\n}\n\nfunction encryptCFB(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.CFB\n    }).toString();\n}\n\nfunction encryptCTR(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.CTR\n    }).toString();\n}\n\nfunction encryptOFB(object,key){\n    return cryptoJs.AES.encrypt(JSON.stringify(object),key,{\n        mode: cryptoJs.mode.OFB\n    }).toString();\n}\n\nmessage = msg.payload.plaintext;\nlet ciphertext, mode = msg.payload.mode || env.get('mode'),key = msg.payload.key || env.get('key');\n\nswitch(mode){\n    case 'CBC':\n        ciphertext = encryptCBC(message, key)\n        break;\n    case 'CFB':\n        ciphertext = encryptCFB(message, key)\n        break;\n    case 'CTR':\n        ciphertext = encryptCTR(message, key)\n        break;\n    case 'OFB':\n        ciphertext = encryptOFB(message, key)\n        break;\n}\ndelete msg.payload.plaintext\nmsg.payload.enc = {\n    mode: mode,\n    ciphertext: ciphertext\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoJs",
                "module": "crypto-js"
            }
        ],
        "x": 420,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "2b178da01e5f24d2",
        "type": "function",
        "z": "95376bbbd3259984",
        "name": "DECRYPTION",
        "func": "function isJSON(text) {\n  try {\n    JSON.parse(text);\n    return true;\n  }catch (e){\n    return false;\n  }\n}\n\nfunction decryptCBC(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.CBC \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\nfunction decryptCFB(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.CFB \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\nfunction decryptCTR(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.CTR \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\nfunction decryptOFB(cipher,key){\n        bytes = cryptoJs.AES.decrypt(cipher,key,{\n            mode: cryptoJs.mode.OFB \n        });\n        return bytes.toString(cryptoJs.enc.Utf8);\n}\n\nmessage = msg.payload.ciphertext;\nlet plaintext, mode = msg.payload.mode || env.get('mode'), key =  msg.payload.key || env.get('key')\n\nswitch(mode){\n    case 'CBC':\n        plaintext = decryptCBC(message, key)\n        break;\n    case 'CFB':\n        plaintext = decryptCFB(message, key)\n        break;\n    case 'CTR':\n        plaintext = decryptCTR(message, key)\n        break;\n    case 'OFB':\n        plaintext = decryptOFB(message, key)\n        break;\n}\ndelete msg.payload.ciphertext\nmsg.payload.dec = {\n    mode: mode,\n    plaintext: isJSON(plaintext) ? JSON.parse(plaintext) : plaintext\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "cryptoJs",
                "module": "crypto-js"
            }
        ],
        "x": 420,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "737cb022b9cbf267",
        "type": "switch",
        "z": "95376bbbd3259984",
        "name": "FUNCTION",
        "property": "function",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "encrypt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "decrypt",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "bcf652f498b2654a"
            ],
            [
                "2b178da01e5f24d2"
            ]
        ]
    },
    {
        "id": "d173af45363cdf6c",
        "type": "mqtt out",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "topic": "usrAction1",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0ec95b9bdb8e7501",
        "x": 570,
        "y": 880,
        "wires": []
    },
    {
        "id": "46fb510cdd2f4797",
        "type": "ui_switch",
        "z": "0ea2520bdfb232c5",
        "name": "Lamp Toggle",
        "label": "Lamp Toggle",
        "tooltip": "",
        "group": "6307337d97088963",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 390,
        "y": 880,
        "wires": [
            [
                "d173af45363cdf6c"
            ]
        ]
    },
    {
        "id": "836d3f9c274b8f6f",
        "type": "ui_audio",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "group": "6307337d97088963",
        "voice": "Google US English",
        "always": false,
        "x": 760,
        "y": 1000,
        "wires": []
    },
    {
        "id": "718fc767d19d6c7a",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "Someone detected",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1000,
        "wires": [
            [
                "836d3f9c274b8f6f"
            ]
        ]
    },
    {
        "id": "8410f4a263ac4b84",
        "type": "mqtt in",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "topic": "pirSensor1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0ec95b9bdb8e7501",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 380,
        "y": 1000,
        "wires": [
            [
                "718fc767d19d6c7a",
                "4a80d2a7fcae1456",
                "28c62795c4de6b23"
            ]
        ]
    },
    {
        "id": "4a80d2a7fcae1456",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "No one detected",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "Someone detected",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 1060,
        "wires": [
            [
                "a97a5cc917001c10"
            ]
        ]
    },
    {
        "id": "a97a5cc917001c10",
        "type": "ui_text",
        "z": "0ea2520bdfb232c5",
        "group": "6307337d97088963",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "PIR Sensor",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 770,
        "y": 1060,
        "wires": []
    },
    {
        "id": "161fbdce10318d9b",
        "type": "mqtt in",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "topic": "encryptTemp1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0ec95b9bdb8e7501",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 80,
        "wires": [
            [
                "51fe418c4f470374"
            ]
        ]
    },
    {
        "id": "6e6e2f7f9511bd9e",
        "type": "mqtt in",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "topic": "encryptHum1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0ec95b9bdb8e7501",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 520,
        "wires": [
            [
                "b3e27c8f5c75d45a"
            ]
        ]
    },
    {
        "id": "f53fab5b9efeb2a4",
        "type": "ui_chart",
        "z": "0ea2520bdfb232c5",
        "name": "Temperature Chart",
        "group": "707efa755cd362f4",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Temperature ",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1730,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "531dc6bd70ba0f3d",
        "type": "ui_text",
        "z": "0ea2520bdfb232c5",
        "group": "707efa755cd362f4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Temperature Text",
        "label": "Temperature:",
        "format": "{{msg.payload}} &deg;C",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1730,
        "y": 120,
        "wires": []
    },
    {
        "id": "50609b2ff28d6a69",
        "type": "ui_text",
        "z": "0ea2520bdfb232c5",
        "group": "179ce820b0772585",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Humidity Text",
        "label": "Humidity:",
        "format": "{{msg.payload}} &deg;C",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1700,
        "y": 540,
        "wires": []
    },
    {
        "id": "21b3b29c7c5b9005",
        "type": "ui_chart",
        "z": "0ea2520bdfb232c5",
        "name": "Humidity Chart",
        "group": "179ce820b0772585",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1700,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "1941ebc1deabbc1b",
        "type": "decode",
        "z": "0ea2520bdfb232c5",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 610,
        "y": 120,
        "wires": [
            [
                "c90d627f723c2acd"
            ]
        ]
    },
    {
        "id": "c90d627f723c2acd",
        "type": "encode",
        "z": "0ea2520bdfb232c5",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 620,
        "y": 160,
        "wires": [
            [
                "8ef1a55092da4468"
            ]
        ]
    },
    {
        "id": "51fe418c4f470374",
        "type": "function",
        "z": "0ea2520bdfb232c5",
        "name": "splitMessage",
        "func": "// Assuming the incoming payload is a string like \"message|hash\"\nvar parts = msg.payload.split(\"|\"); // Split by the delimiter\n\n// Check if the split is successful\nif(parts.length == 2) {\n    msg.msgEncrypted = parts[0];\n    msg.hashEncrypted = parts[1];\n} else {\n    node.error(\"Invalid payload format\", msg);\n    return null; // Stop the flow if the format is not as expected\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 120,
        "wires": [
            [
                "daa70b9fe7e84b45"
            ]
        ]
    },
    {
        "id": "f538d94333befea5",
        "type": "decode",
        "z": "0ea2520bdfb232c5",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1250,
        "y": 120,
        "wires": [
            [
                "722ec3df0cb5e419"
            ]
        ]
    },
    {
        "id": "722ec3df0cb5e419",
        "type": "encode",
        "z": "0ea2520bdfb232c5",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "776764e8e6487f50"
            ]
        ]
    },
    {
        "id": "8ef1a55092da4468",
        "type": "cipher",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 620,
        "y": 200,
        "wires": [
            [
                "a6c44efd0330db0a"
            ]
        ]
    },
    {
        "id": "776764e8e6487f50",
        "type": "cipher",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 1260,
        "y": 200,
        "wires": [
            [
                "aab48e55837b43ed"
            ]
        ]
    },
    {
        "id": "d40b1aef9bfeccbd",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-hashEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "hashEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 80,
        "wires": [
            [
                "f538d94333befea5"
            ]
        ]
    },
    {
        "id": "daa70b9fe7e84b45",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-msgEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msgEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 80,
        "wires": [
            [
                "1941ebc1deabbc1b"
            ]
        ]
    },
    {
        "id": "1c994da299c80c18",
        "type": "function",
        "z": "0ea2520bdfb232c5",
        "name": "verifyHash",
        "func": "\nif(msg.oldHash === msg.newHash) {\n    msg.payload = msg.msgDecrypted\n} else {\n    node.error(\"Message integrity check failed\");\n    return null; // Stop the flow \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 160,
        "wires": [
            [
                "531dc6bd70ba0f3d",
                "f53fab5b9efeb2a4"
            ]
        ]
    },
    {
        "id": "41a87d0bb3dc94f5",
        "type": "debug",
        "z": "0ea2520bdfb232c5",
        "name": "decryptedHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 400,
        "wires": []
    },
    {
        "id": "aab48e55837b43ed",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 240,
        "wires": [
            [
                "4dbb1657264c539e"
            ]
        ]
    },
    {
        "id": "86b8844ec6eccea3",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 80,
        "wires": [
            [
                "b0b99491b4056aa4"
            ]
        ]
    },
    {
        "id": "6149dd5eeef8d702",
        "type": "debug",
        "z": "0ea2520bdfb232c5",
        "name": "newHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 200,
        "wires": []
    },
    {
        "id": "b0b99491b4056aa4",
        "type": "hash sha256",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "x": 930,
        "y": 120,
        "wires": [
            [
                "a5623d2166dcd6dc"
            ]
        ]
    },
    {
        "id": "4dbb1657264c539e",
        "type": "decode",
        "z": "0ea2520bdfb232c5",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1250,
        "y": 280,
        "wires": [
            [
                "a7282a03daeec2b9"
            ]
        ]
    },
    {
        "id": "a7282a03daeec2b9",
        "type": "encode",
        "z": "0ea2520bdfb232c5",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1260,
        "y": 320,
        "wires": [
            [
                "264304fdbf2e2f68"
            ]
        ]
    },
    {
        "id": "0ab485196f533845",
        "type": "debug",
        "z": "0ea2520bdfb232c5",
        "name": "messageDecrypted",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 280,
        "wires": []
    },
    {
        "id": "264304fdbf2e2f68",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "oldHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "oldHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "41a87d0bb3dc94f5",
                "1c994da299c80c18"
            ]
        ]
    },
    {
        "id": "a6c44efd0330db0a",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "msgDecrypted-payload",
        "rules": [
            {
                "t": "set",
                "p": "msgDecrypted",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "0ab485196f533845",
                "86b8844ec6eccea3"
            ]
        ]
    },
    {
        "id": "a5623d2166dcd6dc",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "newHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "newHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 160,
        "wires": [
            [
                "6149dd5eeef8d702",
                "d40b1aef9bfeccbd"
            ]
        ]
    },
    {
        "id": "9ce2291e1ff73555",
        "type": "decode",
        "z": "0ea2520bdfb232c5",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 590,
        "y": 560,
        "wires": [
            [
                "256e0f9b3da3f25e"
            ]
        ]
    },
    {
        "id": "256e0f9b3da3f25e",
        "type": "encode",
        "z": "0ea2520bdfb232c5",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 600,
        "y": 600,
        "wires": [
            [
                "53b1b5218caf4bb8"
            ]
        ]
    },
    {
        "id": "f99764eea236f93b",
        "type": "decode",
        "z": "0ea2520bdfb232c5",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1230,
        "y": 560,
        "wires": [
            [
                "399c9b39a181db45"
            ]
        ]
    },
    {
        "id": "399c9b39a181db45",
        "type": "encode",
        "z": "0ea2520bdfb232c5",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "22ca0559285edc98"
            ]
        ]
    },
    {
        "id": "53b1b5218caf4bb8",
        "type": "cipher",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 600,
        "y": 640,
        "wires": [
            [
                "ae056a3795fe6b0a"
            ]
        ]
    },
    {
        "id": "22ca0559285edc98",
        "type": "cipher",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 1240,
        "y": 640,
        "wires": [
            [
                "3055023ab91c4437"
            ]
        ]
    },
    {
        "id": "e09f385caf9a6966",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-hashEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "hashEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 520,
        "wires": [
            [
                "f99764eea236f93b"
            ]
        ]
    },
    {
        "id": "c7053b2470769e6d",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-msgEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msgEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 520,
        "wires": [
            [
                "9ce2291e1ff73555"
            ]
        ]
    },
    {
        "id": "0e49c3be45ce3a11",
        "type": "function",
        "z": "0ea2520bdfb232c5",
        "name": "verifyHash",
        "func": "\nif(msg.oldHash === msg.newHash) {\n    msg.payload = msg.msgDecrypted\n} else {\n    node.error(\"Message integrity check failed\");\n    return null; // Stop the flow if the format is not as expected\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 580,
        "wires": [
            [
                "50609b2ff28d6a69",
                "21b3b29c7c5b9005"
            ]
        ]
    },
    {
        "id": "662f5f21e6b48027",
        "type": "debug",
        "z": "0ea2520bdfb232c5",
        "name": "decryptedHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 840,
        "wires": []
    },
    {
        "id": "3055023ab91c4437",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1180,
        "y": 680,
        "wires": [
            [
                "4e42ecf988ee7083"
            ]
        ]
    },
    {
        "id": "e31e535e5cd0d867",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 520,
        "wires": [
            [
                "2ca96288a5f5ef1d"
            ]
        ]
    },
    {
        "id": "2d033af0f1f62770",
        "type": "debug",
        "z": "0ea2520bdfb232c5",
        "name": "newHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 640,
        "wires": []
    },
    {
        "id": "2ca96288a5f5ef1d",
        "type": "hash sha256",
        "z": "0ea2520bdfb232c5",
        "name": "",
        "x": 910,
        "y": 560,
        "wires": [
            [
                "7716a1a4a39a5fdb"
            ]
        ]
    },
    {
        "id": "4e42ecf988ee7083",
        "type": "decode",
        "z": "0ea2520bdfb232c5",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "89f6d435e6438612"
            ]
        ]
    },
    {
        "id": "89f6d435e6438612",
        "type": "encode",
        "z": "0ea2520bdfb232c5",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1240,
        "y": 760,
        "wires": [
            [
                "ca79e9db6dbddf1a"
            ]
        ]
    },
    {
        "id": "75f3256a37042ed1",
        "type": "debug",
        "z": "0ea2520bdfb232c5",
        "name": "messageDecrypted",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 720,
        "wires": []
    },
    {
        "id": "ca79e9db6dbddf1a",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "oldHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "oldHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 800,
        "wires": [
            [
                "662f5f21e6b48027",
                "0e49c3be45ce3a11"
            ]
        ]
    },
    {
        "id": "ae056a3795fe6b0a",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "msgDecrypted-payload",
        "rules": [
            {
                "t": "set",
                "p": "msgDecrypted",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 680,
        "wires": [
            [
                "75f3256a37042ed1",
                "e31e535e5cd0d867"
            ]
        ]
    },
    {
        "id": "7716a1a4a39a5fdb",
        "type": "change",
        "z": "0ea2520bdfb232c5",
        "name": "newHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "newHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 600,
        "wires": [
            [
                "2d033af0f1f62770",
                "e09f385caf9a6966"
            ]
        ]
    },
    {
        "id": "b3e27c8f5c75d45a",
        "type": "function",
        "z": "0ea2520bdfb232c5",
        "name": "splitMessage",
        "func": "// Assuming the incoming payload is a string like \"message|hash\"\nvar parts = msg.payload.split(\"|\"); // Split by the delimiter\n\n// Check if the split is successful\nif(parts.length == 2) {\n    msg.msgEncrypted = parts[0];\n    msg.hashEncrypted = parts[1];\n} else {\n    node.error(\"Invalid payload format\", msg);\n    return null; // Stop the flow if the format is not as expected\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 560,
        "wires": [
            [
                "c7053b2470769e6d"
            ]
        ]
    },
    {
        "id": "28c62795c4de6b23",
        "type": "debug",
        "z": "0ea2520bdfb232c5",
        "name": "pirsensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 1120,
        "wires": []
    },
    {
        "id": "0d14a2c34d235f79",
        "type": "mqtt in",
        "z": "1ef184365338606a",
        "name": "",
        "topic": "encryptTemp2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0ec95b9bdb8e7501",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "32b1cbd6ee8b9e46"
            ]
        ]
    },
    {
        "id": "e703ed9cafcab43b",
        "type": "decode",
        "z": "1ef184365338606a",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "1affcf127492a046"
            ]
        ]
    },
    {
        "id": "1affcf127492a046",
        "type": "encode",
        "z": "1ef184365338606a",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 440,
        "y": 220,
        "wires": [
            [
                "45a59530f11c3112"
            ]
        ]
    },
    {
        "id": "32b1cbd6ee8b9e46",
        "type": "function",
        "z": "1ef184365338606a",
        "name": "splitMessage",
        "func": "// Assuming the incoming payload is a string like \"message|hash\"\nvar parts = msg.payload.split(\"|\"); // Split by the delimiter\n\n// Check if the split is successful\nif(parts.length == 2) {\n    msg.msgEncrypted = parts[0];\n    msg.hashEncrypted = parts[1];\n} else {\n    node.error(\"Invalid payload format\", msg);\n    return null; // Stop the flow if the format is not as expected\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 180,
        "wires": [
            [
                "84c6048a7a0b8312"
            ]
        ]
    },
    {
        "id": "598e093423388a00",
        "type": "decode",
        "z": "1ef184365338606a",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1070,
        "y": 180,
        "wires": [
            [
                "53f1c691e12f5000"
            ]
        ]
    },
    {
        "id": "53f1c691e12f5000",
        "type": "encode",
        "z": "1ef184365338606a",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "09ee1950283d12bf"
            ]
        ]
    },
    {
        "id": "45a59530f11c3112",
        "type": "cipher",
        "z": "1ef184365338606a",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 440,
        "y": 260,
        "wires": [
            [
                "04e1d3e7e6ae6701"
            ]
        ]
    },
    {
        "id": "09ee1950283d12bf",
        "type": "cipher",
        "z": "1ef184365338606a",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "027e0a43467956e1"
            ]
        ]
    },
    {
        "id": "3b8e70eb54d814ca",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-hashEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "hashEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "598e093423388a00"
            ]
        ]
    },
    {
        "id": "84c6048a7a0b8312",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-msgEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msgEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "e703ed9cafcab43b"
            ]
        ]
    },
    {
        "id": "a78837bf9ae3b140",
        "type": "function",
        "z": "1ef184365338606a",
        "name": "verifyHash",
        "func": "\nif(msg.oldHash === msg.newHash) {\n    msg.payload = msg.msgDecrypted\n} else {\n    node.error(\"Message integrity check failed\");\n    return null; // Stop the flow \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 220,
        "wires": [
            [
                "608a18f2ae934398",
                "a33444d6b94f5024"
            ]
        ]
    },
    {
        "id": "bd79a326ea5a184a",
        "type": "debug",
        "z": "1ef184365338606a",
        "name": "decryptedHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 460,
        "wires": []
    },
    {
        "id": "027e0a43467956e1",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "2903501214ee2b3f"
            ]
        ]
    },
    {
        "id": "944487cd6859e93a",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 140,
        "wires": [
            [
                "7aa27a26ac04c2c5"
            ]
        ]
    },
    {
        "id": "d72182a4c26bbb03",
        "type": "debug",
        "z": "1ef184365338606a",
        "name": "newHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 260,
        "wires": []
    },
    {
        "id": "7aa27a26ac04c2c5",
        "type": "hash sha256",
        "z": "1ef184365338606a",
        "name": "",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "08edfd3eac16e7ed"
            ]
        ]
    },
    {
        "id": "2903501214ee2b3f",
        "type": "decode",
        "z": "1ef184365338606a",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "e453342f2aae68dc"
            ]
        ]
    },
    {
        "id": "e453342f2aae68dc",
        "type": "encode",
        "z": "1ef184365338606a",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1080,
        "y": 380,
        "wires": [
            [
                "6de56b4f2e77e820"
            ]
        ]
    },
    {
        "id": "1d11add1813c854d",
        "type": "debug",
        "z": "1ef184365338606a",
        "name": "messageDecrypted",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 340,
        "wires": []
    },
    {
        "id": "6de56b4f2e77e820",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "oldHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "oldHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 420,
        "wires": [
            [
                "bd79a326ea5a184a",
                "a78837bf9ae3b140"
            ]
        ]
    },
    {
        "id": "04e1d3e7e6ae6701",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "msgDecrypted-payload",
        "rules": [
            {
                "t": "set",
                "p": "msgDecrypted",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 300,
        "wires": [
            [
                "1d11add1813c854d",
                "944487cd6859e93a"
            ]
        ]
    },
    {
        "id": "08edfd3eac16e7ed",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "newHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "newHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 220,
        "wires": [
            [
                "d72182a4c26bbb03",
                "3b8e70eb54d814ca"
            ]
        ]
    },
    {
        "id": "608a18f2ae934398",
        "type": "ui_chart",
        "z": "1ef184365338606a",
        "name": "Temperature Chart",
        "group": "2bc9383be496ea4b",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Temperature ",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1550,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a33444d6b94f5024",
        "type": "ui_text",
        "z": "1ef184365338606a",
        "group": "2bc9383be496ea4b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Temperature Text",
        "label": "Temperature:",
        "format": "{{msg.payload}} &deg;C",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1550,
        "y": 260,
        "wires": []
    },
    {
        "id": "1282f8a5623d8b46",
        "type": "mqtt in",
        "z": "1ef184365338606a",
        "name": "",
        "topic": "encryptHum2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0ec95b9bdb8e7501",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 580,
        "wires": [
            [
                "1b1a898fb32e3cab"
            ]
        ]
    },
    {
        "id": "baac93ddd98c128a",
        "type": "decode",
        "z": "1ef184365338606a",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 410,
        "y": 620,
        "wires": [
            [
                "c85a9aa9f87da15c"
            ]
        ]
    },
    {
        "id": "c85a9aa9f87da15c",
        "type": "encode",
        "z": "1ef184365338606a",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 420,
        "y": 660,
        "wires": [
            [
                "af626dc908b72dc6"
            ]
        ]
    },
    {
        "id": "c78044719e93ed1a",
        "type": "decode",
        "z": "1ef184365338606a",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1050,
        "y": 620,
        "wires": [
            [
                "b20ab582253cc8e3"
            ]
        ]
    },
    {
        "id": "b20ab582253cc8e3",
        "type": "encode",
        "z": "1ef184365338606a",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1060,
        "y": 660,
        "wires": [
            [
                "3d09ab30850126e0"
            ]
        ]
    },
    {
        "id": "af626dc908b72dc6",
        "type": "cipher",
        "z": "1ef184365338606a",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 420,
        "y": 700,
        "wires": [
            [
                "5ca4edcb25555f75"
            ]
        ]
    },
    {
        "id": "3d09ab30850126e0",
        "type": "cipher",
        "z": "1ef184365338606a",
        "name": "",
        "function": "Decrypt",
        "algorithm": "AES-ECB",
        "iv": "00000000000000000000000000000000",
        "key": "657261736d75736d756e647573313233",
        "ivSize": "16",
        "keySize": "16",
        "x": 1060,
        "y": 700,
        "wires": [
            [
                "5e5884406f0c8e03"
            ]
        ]
    },
    {
        "id": "eb21073984e15917",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-hashEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "hashEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 580,
        "wires": [
            [
                "c78044719e93ed1a"
            ]
        ]
    },
    {
        "id": "96cd2b298aa1fabb",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-msgEncrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msgEncrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 580,
        "wires": [
            [
                "baac93ddd98c128a"
            ]
        ]
    },
    {
        "id": "3df83936a9aff98e",
        "type": "function",
        "z": "1ef184365338606a",
        "name": "verifyHash",
        "func": "\nif(msg.oldHash === msg.newHash) {\n    msg.payload = msg.msgDecrypted\n} else {\n    node.error(\"Message integrity check failed\");\n    return null; // Stop the flow if the format is not as expected\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "36b373046d8e820f",
                "61909ed18ffea42d"
            ]
        ]
    },
    {
        "id": "62ccd63e900cd822",
        "type": "debug",
        "z": "1ef184365338606a",
        "name": "decryptedHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 900,
        "wires": []
    },
    {
        "id": "5e5884406f0c8e03",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 740,
        "wires": [
            [
                "e4e4657d5fd88573"
            ]
        ]
    },
    {
        "id": "e116830b1a130a93",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "payload-payload.decrypted",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 580,
        "wires": [
            [
                "63d51eabeada4cb3"
            ]
        ]
    },
    {
        "id": "8733966ad22fa65a",
        "type": "debug",
        "z": "1ef184365338606a",
        "name": "newHash",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 700,
        "wires": []
    },
    {
        "id": "63d51eabeada4cb3",
        "type": "hash sha256",
        "z": "1ef184365338606a",
        "name": "",
        "x": 730,
        "y": 620,
        "wires": [
            [
                "24057e3509204ec7"
            ]
        ]
    },
    {
        "id": "e4e4657d5fd88573",
        "type": "decode",
        "z": "1ef184365338606a",
        "name": "Dec: base64",
        "encode": "Base64",
        "x": 1050,
        "y": 780,
        "wires": [
            [
                "9a1560eaeb521b98"
            ]
        ]
    },
    {
        "id": "9a1560eaeb521b98",
        "type": "encode",
        "z": "1ef184365338606a",
        "name": "Enc: Hex",
        "encode": "Hex",
        "x": 1060,
        "y": 820,
        "wires": [
            [
                "270dfba7ad2e3ac7"
            ]
        ]
    },
    {
        "id": "04d52d27e507852e",
        "type": "debug",
        "z": "1ef184365338606a",
        "name": "messageDecrypted",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 780,
        "wires": []
    },
    {
        "id": "270dfba7ad2e3ac7",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "oldHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "oldHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 860,
        "wires": [
            [
                "62ccd63e900cd822",
                "3df83936a9aff98e"
            ]
        ]
    },
    {
        "id": "5ca4edcb25555f75",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "msgDecrypted-payload",
        "rules": [
            {
                "t": "set",
                "p": "msgDecrypted",
                "pt": "msg",
                "to": "payload.decrypted",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 740,
        "wires": [
            [
                "04d52d27e507852e",
                "e116830b1a130a93"
            ]
        ]
    },
    {
        "id": "24057e3509204ec7",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "newHash-payload",
        "rules": [
            {
                "t": "set",
                "p": "newHash",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 660,
        "wires": [
            [
                "8733966ad22fa65a",
                "eb21073984e15917"
            ]
        ]
    },
    {
        "id": "36b373046d8e820f",
        "type": "ui_text",
        "z": "1ef184365338606a",
        "group": "1a29357cf76cc86c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Humidity Text",
        "label": "Humidity:",
        "format": "{{msg.payload}} %",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1520,
        "y": 600,
        "wires": []
    },
    {
        "id": "61909ed18ffea42d",
        "type": "ui_chart",
        "z": "1ef184365338606a",
        "name": "Humidity Chart",
        "group": "1a29357cf76cc86c",
        "order": 0,
        "width": 0,
        "height": 0,
        "label": "Humidity",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1520,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "1b1a898fb32e3cab",
        "type": "function",
        "z": "1ef184365338606a",
        "name": "splitMessage",
        "func": "// Assuming the incoming payload is a string like \"message|hash\"\nvar parts = msg.payload.split(\"|\"); // Split by the delimiter\n\n// Check if the split is successful\nif(parts.length == 2) {\n    msg.msgEncrypted = parts[0];\n    msg.hashEncrypted = parts[1];\n} else {\n    node.error(\"Invalid payload format\", msg);\n    return null; // Stop the flow if the format is not as expected\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 620,
        "wires": [
            [
                "96cd2b298aa1fabb"
            ]
        ]
    },
    {
        "id": "7cfd9868dbafea19",
        "type": "mqtt out",
        "z": "1ef184365338606a",
        "name": "",
        "topic": "usrAction2",
        "qos": "",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0ec95b9bdb8e7501",
        "x": 310,
        "y": 980,
        "wires": []
    },
    {
        "id": "3c06b399dc2107ee",
        "type": "ui_switch",
        "z": "1ef184365338606a",
        "name": "Lamp Toggle",
        "label": "Lamp Toggle",
        "tooltip": "",
        "group": "7989444b934d9ec1",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "1",
        "onvalueType": "num",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "num",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "7cfd9868dbafea19"
            ]
        ]
    },
    {
        "id": "945ffe3411540929",
        "type": "ui_audio",
        "z": "1ef184365338606a",
        "name": "",
        "group": "7989444b934d9ec1",
        "voice": "Google US English",
        "always": false,
        "x": 500,
        "y": 1100,
        "wires": []
    },
    {
        "id": "338c4ad6209ee545",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "Someone detected",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "945ffe3411540929"
            ]
        ]
    },
    {
        "id": "a447945dfe7706d4",
        "type": "mqtt in",
        "z": "1ef184365338606a",
        "name": "",
        "topic": "pirSensor2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0ec95b9bdb8e7501",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 1100,
        "wires": [
            [
                "338c4ad6209ee545",
                "adab59370395764f"
            ]
        ]
    },
    {
        "id": "adab59370395764f",
        "type": "change",
        "z": "1ef184365338606a",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "0",
                "fromt": "num",
                "to": "No one detected",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "1",
                "fromt": "num",
                "to": "Someone detected",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "cf27fab8fddbcf8b"
            ]
        ]
    },
    {
        "id": "cf27fab8fddbcf8b",
        "type": "ui_text",
        "z": "1ef184365338606a",
        "group": "7989444b934d9ec1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "PIR Sensor",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 510,
        "y": 1160,
        "wires": []
    }
]